From bec8b95395445e564699b1af9cde48ad36b2c069 Mon Sep 17 00:00:00 2001
From: Vladimir Ermakov <vooon341@gmail.com>
Date: Wed, 18 Jun 2014 16:50:39 +0400
Subject: [PATCH 08/16] Rebase from 'upstream'

---
 CMakeLists.txt                           | 169 +++++++++++++++++++++++++------
 config.cmake.in                          |  26 -----
 pc.in                                    |   9 +-
 pymavlink/CMakeLists.txt                 |  23 -----
 pymavlink/python_distutils_install.sh.in |  22 ----
 5 files changed, 144 insertions(+), 105 deletions(-)
 delete mode 100644 config.cmake.in
 delete mode 100644 pymavlink/CMakeLists.txt
 delete mode 100755 pymavlink/python_distutils_install.sh.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c1d8128..eb38415 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,8 +1,5 @@
 project (mavlink NONE)
 
-# Note: patched version for installation as ROS 3-rd party library
-# Provides C-headers and pymavlink
-
 # settings
 cmake_minimum_required (VERSION 2.8.2)
 set(PROJECT_VERSION_MAJOR "1")
@@ -11,19 +8,109 @@ set(PROJECT_VERSION_PATCH "9")
 set(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
 set(PROJECT_CONTACT_EMAIL http://groups.google.com/group/mavlink)
 set(PROJECT_CONTACT_VENDOR mavlink)
+set(LIBRARY_VERSION ${PROJECT_VERSION})
+set(LIBRARY_SOVERSION "0.0.0")
 
-include(GNUInstallDirs)
+# third party 
+# none required
+
+# options
+option(WITH_TESTS "Build test programs." OFF)
+option(WITH_BUILD_DEPS "Build dependencies." OFF) # no deps currently to build
+option(WITH_BUILD_STATIC "Build preferring static linking." ON)
+
+# variables
+set(ROOT_THREAD TRUE CACHE INTERNAL "Is this the top level of the recursion?")
+
+# modules
+list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_SOURCE_DIR}/cmake/arkcmake)
+include(DefineCMakeDefaults)
+include(CheckIncludeFiles)
+include(CheckFunctionExists)
+include(CheckSymbolExists)
+include(CheckLibraryExists)
+#include(CheckTypeSize)
+#include(CheckPrototypeExists)
+#include(CheckCXXSourceCompiles)
+#include(CheckCSourceCompiles)
+include(ExternalProjectWithFilename)
+
+# spawn new cmake to build deps
+if (WITH_BUILD_DEPS AND ROOT_THREAD)
+    execute_process(COMMAND ${CMAKE_COMMAND} "${CMAKE_SOURCE_DIR}"
+        "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}"
+        "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}"
+        "-DWITH_BUILD_DEPS=${WITH_BUILD_DEPS}"
+        "-DWITH_BUILD_STATIC=${WITH_BUILD_STATIC}"
+        "-DWITH_TESTS=${WITH_TESTS}"
+        "-DROOT_THREAD=FALSE"
+        RESULT_VARIABLE ERROR)
+    if (ERROR)
+        message(FATAL_ERROR "error, recursing loop returned error code: ${ERROR}")
+    endif()
+    message("** Making dependencies")
+    execute_process(COMMAND ${CMAKE_MAKE_PROGRAM} "-j4" "-f${CMAKE_BINARY_DIR}/Makefile")
+    message("** Configuring ${PROJECT_NAME}")
+endif()
+
+# external projects find path
+if(NOT EP_BASE_DIR)
+    set(EP_BASE_DIR "${CMAKE_BINARY_DIR}/CMakeExternals")
+endif()
+set_property(DIRECTORY PROPERTY EP_BASE ${EP_BASE_DIR})
+set(EP_INSTALL_DIR "${EP_BASE_DIR}/Install")
+list(APPEND CMAKE_FIND_ROOT_PATH ${EP_BASE_DIR})
+
+# prefer static packages if building static library
+message("** Finding libraries")
+if (WITH_BUILD_STATIC)
+    # prefer static libs
+    if(WIN32)
+        set(CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
+    else()
+        set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
+    endif()
+endif()
 
 # find libraries with cmake modules
-set(PythonInterp_FIND_VERSION "2")
-find_package(PythonInterp REQUIRED)
+find_package(PythonInterp)
+
+# enable languages
+if (WITH_TESTS)
+    enable_language(C)
+    enable_language(CXX)
+    include(DefineCompilerFlags)
+endif()
+
+# build dependencies
+if (WITH_BUILD_DEPS AND (NOT ROOT_THREAD) )
+    message("** Configuring dependencies")
+
+    # add external projects
+
+    # none required currently
+
+    set(CMAKE_DEFAULT_ARGS
+        -DEP_BASE_DIR=${EP_BASE_DIR}
+        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
+        )
+
+    # terminate non root cmake thread
+    return()
+endif()
+
+# configure
+#check_include_files(string.h HAVE_STRING_H)
+#check_function_exists(memcopy HAVE_MEMCOPY)
+#check_symbol_exists(LC_MESSAGES "locale.h" HAVE_LC_MESSAGES) 
+#check_library_exists(pthread  attachNode "" HAVE_PTHREAD)
 
 # config files
 configure_file(config.h.in config.h)
 install(FILES ${CMAKE_BINARY_DIR}/config.h DESTINATION include/${PROJECT_NAME} COMPONENT Dev)
 
 # mavlink generation
-set(mavgen_path ${CMAKE_SOURCE_DIR}/pymavlink/generator/mavgen.py)
 macro(generateMavlink version definitions)
     foreach(definition ${definitions})
         set(targetName ${definition}-v${version})
@@ -31,17 +118,17 @@ macro(generateMavlink version definitions)
         message(STATUS "processing: ${definitionAbsPath}")
         add_custom_command( 
             OUTPUT ${targetName}-stamp
-            COMMAND /usr/bin/env PYTHONPATH="${CMAKE_SOURCE_DIR}:$$PYTHONPATH"
-                ${PYTHON_EXECUTABLE} -m pymavlink.generator.mavgen --lang=C --wire-protocol=${version}
+            COMMAND ${PYTHON_EXECUTABLE} ${mavgen} --lang=C --wire-protocol=${version}
                 --output=include/v${version} ${definitionAbsPath}
             COMMAND touch ${targetName}-stamp
-            DEPENDS ${definitionAbsPath} ${mavgen_path}
+            DEPENDS ${definitionAbsPath} ${mavgen}
             )
         add_custom_target(${targetName} ALL DEPENDS ${targetName}-stamp)
     endforeach()
 endmacro()
 
 # build
+set(mavgen ${CMAKE_SOURCE_DIR}/pymavlink/generator/mavgen.py)
 set(v0.9Definitions
     ardupilotmega.xml
     common.xml
@@ -51,8 +138,7 @@ set(v0.9Definitions
     test.xml
     ualberta.xml
     )
-# XXX: generation headers for 0.9 is broken
-#generateMavlink("0.9" "${v0.9Definitions}")
+generateMavlink("0.9" "${v0.9Definitions}")
 set(v1.0Definitions
     ardupilotmega.xml
     autoquad.xml
@@ -67,34 +153,59 @@ set(v1.0Definitions
     )
 generateMavlink("1.0" "${v1.0Definitions}")
 
-add_subdirectory(pymavlink)
+# testing
+if (BUILD_TEST)
+    if (UNIX) 
+        include_directories(${CMAKE_BINARY_DIR}/include/v0.9/common)
+        # TODO fix udp example
+        #add_executable(mavlink_udp examples/linux/mavlink_udp.c)
+    endif()
+endif()
 
 # install files
 install(DIRECTORY ${CMAKE_BINARY_DIR}/include/ DESTINATION include/${PROJECT_NAME} COMPONENT Dev FILES_MATCHING PATTERN "*.h*")
 install(DIRECTORY ${CMAKE_BINARY_DIR}/src/ DESTINATION share/${PROJECT_NAME} COMPONENT Dev FILES_MATCHING PATTERN "*.c*")
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/share/${PROJECT_NAME} DESTINATION share COMPONENT Dev FILES_MATCHING PATTERN "*.c*")
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/pymavlink DESTINATION "share/pyshared" COMPONENT Dev)
 
-# thanks for urdfdom project
-set(PKG_NAME ${PROJECT_NAME})
-set(PKG_VERSION ${PROJECT_VERSION})
-set(PKG_DESC "mavlink message marshalling library")
-set(PKG_LIBRARIES )
-set(PKG_DEPENDS )
+configure_file(pc.in ${PROJECT_NAME}.pc)
+install(FILES
+    ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc
+    DESTINATION "lib/pkgconfig" COMPONENT Dev
+    )
 
-configure_file(config.cmake.in ${PROJECT_NAME}-config.cmake @ONLY)
-install(FILES ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
-    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake/ COMPONENT cmake)
+### packaging
 
-configure_file(pc.in ${PROJECT_NAME}.pc @ONLY)
-install(FILES ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc
-    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig/ COMPONENT pkgconfig)
+# apple bundle icon
+if (APPLE)
+    # set how it shows up in Info.plist
+    set(MACOSX_BUNDLE_ICON_FILE mavlink.icns)
+    # set where in the bundle to put the icns file
+    set_source_files_properties(cmake/mavlink.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
+    # include the icns file in the target
+    #list(APPEND MAVLINKGUI_SRCS cmake/mavlink.icns)
+endif()
+
+# set NSIS image
+if (WIN32)
+    set(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/cmake/mavlink.bmp")
+endif()
 
 # add file extensions and set resource files
 configure_file("COPYING" "COPYING.txt" COPYONLY)
-install(FILES ${PROJECT_BINARY_DIR}/COPYING.txt
-    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/ COMPONENT license)
+configure_file("README.md" "README.md" COPYONLY)
+set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_BINARY_DIR}/COPYING.txt")
+set(CPACK_RESOURCE_FILE_README "${CMAKE_BINARY_DIR}/README.md")
+set(CPACK_PACKAGE_DESCRIPTION_FILE "${CPACK_RESOURCE_FILE_README}")
+set(CPACK_RESOURCE_FILE_WELCOME "${CMAKE_SOURCE_DIR}/cmake/WELCOME.txt")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "mavlink message marshalling library")
+set(CPACK_PACKAGE_VENDOR ${PROJECT_CONTACT_VENDOR})
+set(CPACK_PACKAGE_CONTACT "${PROJECT_CONTACT_EMAIL}")
+set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}")
+set(CPACK_COMPONENTS_GROUPING "ALL_COMPONENTS_IN_ONE")
+include(CPack)
 
-install(FILES ${CMAKE_SOURCE_DIR}/package.xml
-    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/ COMPONENT catkin)
 
 # vim:sw=4:ts=4:expandtab
diff --git a/config.cmake.in b/config.cmake.in
deleted file mode 100644
index f56baa5..0000000
--- a/config.cmake.in
+++ /dev/null
@@ -1,26 +0,0 @@
-if (@PKG_NAME@_CONFIG_INCLUDED)
-  return()
-endif()
-set(@PKG_NAME@_CONFIG_INCLUDED TRUE)
-
-set(@PKG_NAME@_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/include")
-
-foreach(lib @PKG_LIBRARIES@)
-  set(onelib "${lib}-NOTFOUND")
-  find_library(onelib ${lib}
-      PATHS "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@"
-    NO_DEFAULT_PATH
-    )
-  if(NOT onelib)
-    message(FATAL_ERROR "Library '${lib}' in package @PKG_NAME@ is not installed properly")
-  endif()
-  list(APPEND @PKG_NAME@_LIBRARIES ${onelib})
-endforeach()
-
-foreach(dep @PKG_DEPENDS@)
-  if(NOT ${dep}_FOUND)
-    find_package(${dep})
-  endif()
-  list(APPEND @PKG_NAME@_INCLUDE_DIRS ${${dep}_INCLUDE_DIRS})
-  list(APPEND @PKG_NAME@_LIBRARIES ${${dep}_LIBRARIES})
-endforeach()
diff --git a/pc.in b/pc.in
index 77a4548..98bbb84 100644
--- a/pc.in
+++ b/pc.in
@@ -1,8 +1,7 @@
 prefix=@CMAKE_INSTALL_PREFIX@
 exec_prefix=@CMAKE_INSTALL_PREFIX@
-includedir=${prefix}/include
 
-Name: @PKG_NAME@
-Description: @PKG_DESC@
-Version: @PKG_VERSION@
-Cflags: -I${includedir}
+Name: @PROJECT_NAME@
+Description: @CPACK_PACKAGE_DESCRIPTION_SUMMARY@
+Version: @APPLICATION_VERSION@
+Cflags: -I@CMAKE_INSTALL_PREFIX@/include/@PROJECT_NAME@
diff --git a/pymavlink/CMakeLists.txt b/pymavlink/CMakeLists.txt
deleted file mode 100644
index 7fb27ed..0000000
--- a/pymavlink/CMakeLists.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-# pymavlink support's python2 only
-set(PythonInterp_FIND_VERSION "2")
-find_package(PythonInterp REQUIRED)
-
-# part of catkin/python.cmake
-set(enable_setuptools_deb_layout OFF)
-if(EXISTS "/etc/debian_version")
-  set(enable_setuptools_deb_layout ON)
-endif()
-option(SETUPTOOLS_DEB_LAYOUT "Enable debian style python package layout" ${enable_setuptools_deb_layout})
-
-if(SETUPTOOLS_DEB_LAYOUT)
-  message(STATUS "Using Debian Python package layout")
-  set(SETUPTOOLS_ARG_EXTRA "--install-layout=deb")
-else()
-  message(STATUS "Using default Python package layout")
-endif()
-
-# prepare installation script
-set(INSTALL_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/python_distutils_install.sh)
-configure_file(python_distutils_install.sh.in ${INSTALL_SCRIPT} @ONLY)
-
-install(CODE "execute_process(COMMAND \"${INSTALL_SCRIPT}\" WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\")")
diff --git a/pymavlink/python_distutils_install.sh.in b/pymavlink/python_distutils_install.sh.in
deleted file mode 100755
index b39c2ed..0000000
--- a/pymavlink/python_distutils_install.sh.in
+++ /dev/null
@@ -1,22 +0,0 @@
-#!/bin/sh -x
-# Modified version of catkin template/python_distutils_install.sh.in
-
-if [ -n "$DESTDIR" ] ; then
-    case $DESTDIR in
-        /*) # ok
-            ;;
-        *)
-            /bin/echo "DESTDIR argument must be absolute... "
-            /bin/echo "otherwise python's distutils will bork things."
-            exit 1
-    esac
-    DESTDIR_ARG="--root=$DESTDIR"
-fi
-
-/usr/bin/env \
-    "@PYTHON_EXECUTABLE@" \
-    "@CMAKE_CURRENT_SOURCE_DIR@/setup.py" \
-    build --build-base "@CMAKE_CURRENT_BINARY_DIR@/pybuild" \
-    install \
-    $DESTDIR_ARG \
-    @SETUPTOOLS_ARG_EXTRA@ --prefix="@CMAKE_INSTALL_PREFIX@"
-- 
1.9.1

